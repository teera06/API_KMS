#pragma once
#include <EngineBase\EngineDebug.h>
#include <EngineBase\EngineString.h>
#include <EngineBase\EngineTime.h>

#include <EnginePlatform\EngineWindow.h>
#include <EnginePlatform\EngineInput.h>
#include <map>

// 전방 선언 -> 언리얼식
class ULevel;
// 설명 :
class EngineCore
{
public:
	~EngineCore();

	// delete Function
	EngineCore(const EngineCore& _Other) = delete;
	EngineCore(EngineCore&& _Other) noexcept = delete;
	EngineCore& operator=(const EngineCore& _Other) = delete;
	EngineCore& operator=(EngineCore&& _Other) noexcept = delete;

	// 하나는 무조건 만들어지고 사라질일이 없을것이므ㅗ.
	// 코어가 윈도우를 가지고
	EngineWindow MainWindow; // 윈도우 창
	EngineTime MainTimer; // 시간체크

	// (주요 부분)엔진 실행 ->  시간 체크 -> 윈도우창 생성 -> 레벨 생성 -> 루프를 통한 윈도우창 유지
	static void EngineStart(HINSTANCE _hInstance, EngineCore* _UserCore);
	void CoreInit(HINSTANCE _Init);
	//-------------------------------------------------------------------

	// 가상함수
	virtual void BeginPlay();
	virtual void Tick(float _DeltaTime);
	virtual void End();

	// Map을 통한 레벨 관리
	template<typename LevelType>
	void CreateLevel(std::string_view _Name)
	{
		std::string UpperName = EngineString::ToUpper(_Name);

		if (true == AllLevel.contains(UpperName))
		{
			MsgBoxAssert(std::string(_Name) + "이라는 이름의 Level을 또 만들려고 했습니다");
		}

		LevelType* NewLevel = new LevelType();
		LevelInit(NewLevel);
		AllLevel.insert(std::pair<std::string, ULevel*>(UpperName, NewLevel));
	}

	// 현재 Level 위치 설정
	void ChangeLevel(std::string_view _Name);

	// 프레임 설정
	void SetFrame(int _Frame)
	{
		Frame = _Frame;
		FrameTime = 1 / static_cast<float>(Frame);
	}

protected:
	// 엔진 코어를 여러곳에서 사용하는 것을 방지
	EngineCore();

private:
	// 프레임 관련 맴버 변수
	int Frame = -1;
	float FrameTime = 0.0f;
	float CurFrameTime = 0.0f;


	bool EngineInit = false;
	std::map<std::string, ULevel*> AllLevel; // 레벨 Map
	ULevel* CurLevel = nullptr; // 현재 레벨

	// 엔진 업데이트
	static void EngineTick(); 
	void CoreTick();  // Level 틱 관리(본인의 레벨, 레벨위의 액터, 랜더링, (Actor)릭 관리) 
	// --------------------------------

	static void EngineEnd(); // (Level) 릭관리

	void LevelInit(ULevel* _Level);
};

extern EngineCore* GEngine;


#define ENGINESTART(USERCORE) \
int APIENTRY wWinMain(_In_ HINSTANCE hInstance, \
	_In_opt_ HINSTANCE hPrevInstance, \
	_In_ LPWSTR    lpCmdLine, \
	_In_ int       nCmdShow) \
{ \
    LeakCheck; \
	USERCORE NewUserCore = USERCORE(); \
	EngineCore::EngineStart(hInstance, &NewUserCore); \
}